definitions:
  handlers.CreatingNote:
    properties:
      content:
        type: string
      createdAt:
        type: string
      filePath:
        items:
          type: string
        type: array
      id:
        type: string
      meta:
        $ref: '#/definitions/models.NoteMeta'
      updatedAt:
        type: string
    type: object
  handlers.DeletedNote:
    properties:
      filePath:
        items:
          type: string
        type: array
      id:
        type: string
    type: object
  handlers.HttpError-any:
    properties:
      data: {}
      message:
        type: string
    type: object
  handlers.HttpResponse-any-any:
    properties:
      data: {}
      meta: {}
    type: object
  handlers.HttpResponse-array_models_APIToken-any:
    properties:
      data:
        items:
          $ref: '#/definitions/models.APIToken'
        type: array
      meta: {}
    type: object
  handlers.HttpResponse-array_models_PublicNote-models_Pagination:
    properties:
      data:
        items:
          $ref: '#/definitions/models.PublicNote'
        type: array
      meta:
        $ref: '#/definitions/models.Pagination'
    type: object
  handlers.HttpResponse-array_string-any:
    properties:
      data:
        items:
          type: string
        type: array
      meta: {}
    type: object
  handlers.HttpResponse-handlers_OAuthRedirectData-any:
    properties:
      data:
        $ref: '#/definitions/handlers.OAuthRedirectData'
      meta: {}
    type: object
  handlers.HttpResponse-handlers_SyncNotesResponse-any:
    properties:
      data:
        $ref: '#/definitions/handlers.SyncNotesResponse'
      meta: {}
    type: object
  handlers.HttpResponse-models_APIToken-any:
    properties:
      data:
        $ref: '#/definitions/models.APIToken'
      meta: {}
    type: object
  handlers.HttpResponse-models_PublicNote-any:
    properties:
      data:
        $ref: '#/definitions/models.PublicNote'
      meta: {}
    type: object
  handlers.HttpResponse-models_UserPersonalInfo-any:
    properties:
      data:
        $ref: '#/definitions/models.UserPersonalInfo'
      meta: {}
    type: object
  handlers.OAuthRedirectData:
    properties:
      redirectUrl:
        type: string
    type: object
  handlers.SubscribeBody:
    properties:
      token:
        type: string
    type: object
  handlers.SyncNotesRequest:
    properties:
      deletedNotesIds:
        items:
          type: string
        type: array
      notes:
        items:
          $ref: '#/definitions/handlers.CreatingNote'
        type: array
      timestamp:
        type: string
    type: object
  handlers.SyncNotesResponse:
    properties:
      deletedNotes:
        items:
          $ref: '#/definitions/handlers.DeletedNote'
        type: array
      notes:
        items:
          $ref: '#/definitions/models.PublicNote'
        type: array
    type: object
  models.APIToken:
    properties:
      id:
        type: string
      permission:
        type: string
      token:
        type: string
    type: object
  models.ConnectedNotes:
    additionalProperties:
      type: string
    type: object
  models.NoteHeading:
    properties:
      level:
        type: integer
      text:
        type: string
    type: object
  models.NoteLink:
    properties:
      name:
        type: string
      url:
        type: string
    type: object
  models.NoteMeta:
    properties:
      category:
        $ref: '#/definitions/models.category'
      connectedNotes:
        $ref: '#/definitions/models.ConnectedNotes'
      description:
        type: string
      externalLinks:
        items:
          $ref: '#/definitions/models.NoteLink'
        type: array
      fileTags:
        items:
          type: string
        type: array
      headings:
        items:
          $ref: '#/definitions/models.NoteHeading'
        type: array
      images:
        items:
          type: string
        type: array
      previewImg:
        type: string
      published:
        type: boolean
      startup:
        type: string
      title:
        type: string
    type: object
  models.Pagination:
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total:
        type: integer
    type: object
  models.PublicNote:
    properties:
      author:
        $ref: '#/definitions/models.PublicUser'
      content:
        type: string
      createdAt:
        type: string
      filePath:
        items:
          type: string
        type: array
      id:
        description: It's externalID from original note
        type: string
      isMy:
        type: boolean
      meta:
        $ref: '#/definitions/models.NoteMeta'
      size:
        type: integer
      updatedAt:
        type: string
    type: object
  models.PublicUser:
    properties:
      avatarUrl:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      nickName:
        type: string
      profileUrl:
        type: string
    type: object
  models.UserPersonalInfo:
    properties:
      active:
        type: boolean
      avatarUrl:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      nickName:
        type: string
      profileUrl:
        type: string
      spaceLimit:
        type: integer
      usedSpace:
        type: integer
    type: object
  models.category:
    enum:
    - article
    - book
    - schedule
    type: string
    x-enum-varnames:
    - CategoryArticle
    - CategoryBook
    - CategorySchedule
info:
  contact:
    email: artawower@protonmail.com
    name: API Support
  description: List of methods for work with Org Note.
  license:
    name: GPL 3.0
    url: https://www.gnu.org/licenses/gpl-3.0.html
  termsOfService: http://swagger.io/terms/
  title: Org Note API
  version: 0.0.1
paths:
  /auth/{provider}/callback:
    get:
      consumes:
      - application/json
      parameters:
      - description: provider
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Callback for OAuth
      tags:
      - auth
  /auth/{provider}/login:
    get:
      consumes:
      - application/json
      description: Entrypoint for login
      parameters:
      - description: provider
        in: path
        name: provider
        required: true
        type: string
      - description: OAuth state
        in: query
        name: state
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HttpResponse-handlers_OAuthRedirectData-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: OAuth Login
      tags:
      - auth
  /auth/account:
    delete:
      consumes:
      - application/json
      description: Delete user account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Delete user account
      tags:
      - auth
  /auth/api-tokens:
    get:
      consumes:
      - application/json
      description: Return all available API tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HttpResponse-array_models_APIToken-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Get API tokens
      tags:
      - auth
  /auth/logout:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Logout
      tags:
      - auth
  /auth/subscribe:
    post:
      consumes:
      - application/json
      description: Subscribe for backend features, like sync notes
      parameters:
      - description: token
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.SubscribeBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Subscribe
      tags:
      - auth
  /auth/token:
    post:
      consumes:
      - application/json
      description: Create API token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HttpResponse-models_APIToken-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Create API token
      tags:
      - auth
  /auth/token/{tokenId}:
    delete:
      consumes:
      - application/json
      description: Delete API token
      parameters:
      - description: token id
        in: path
        name: tokenId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Delete API token
      tags:
      - auth
  /auth/verify:
    get:
      consumes:
      - application/json
      description: Return found user by provided token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HttpResponse-models_UserPersonalInfo-any'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Verify user
      tags:
      - auth
  /files/upload:
    post:
      consumes:
      - application/json
      description: Upload files.
      parameters:
      - collectionFormat: csv
        description: files
        in: formData
        items:
          type: string
        name: files
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Upload files
      tags:
      - files
  /notes:
    delete:
      consumes:
      - application/json
      description: Mark notes as deleted by provided list of ids
      parameters:
      - description: List of ids of deleted notes
        in: body
        name: ids
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HttpResponse-any-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Delete notes
      tags:
      - notes
  /notes/:
    get:
      consumes:
      - application/json
      description: Get all notes with optional filter
      parameters:
      - in: query
        name: limit
        type: integer
        x-order: "1"
      - in: query
        name: offset
        type: integer
        x-order: "2"
      - description: User id of which notes to load
        in: query
        name: userId
        type: string
        x-order: "3"
      - in: query
        name: searchText
        type: string
        x-order: "4"
      - description: Load all my own notes (user will be used from provided token)
        in: query
        name: my
        type: boolean
        x-order: "5"
      - in: query
        name: from
        type: string
        x-order: "6"
      - in: query
        name: includeDeleted
        type: boolean
        x-order: "7"
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HttpResponse-array_models_PublicNote-models_Pagination'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Get notes
      tags:
      - notes
    post:
      consumes:
      - application/json
      description: Create note
      parameters:
      - description: Note model
        in: body
        name: note
        required: true
        schema:
          $ref: '#/definitions/handlers.CreatingNote'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Create note
      tags:
      - notes
  /notes/{id}:
    get:
      consumes:
      - application/json
      description: get note by id
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HttpResponse-models_PublicNote-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Get note
      tags:
      - notes
  /notes/bulk-upsert:
    put:
      consumes:
      - application/json
      description: Bulk update or insert notes
      parameters:
      - description: List of crated notes
        in: body
        name: notes
        required: true
        schema:
          items:
            $ref: '#/definitions/handlers.CreatingNote'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Upsert notes
      tags:
      - notes
  /notes/sync:
    post:
      consumes:
      - application/json
      description: Synchronize notes with specific timestamp
      parameters:
      - description: Sync notes request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handlers.SyncNotesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HttpResponse-handlers_SyncNotesResponse-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Synchronize notes
      tags:
      - notes
  /tags:
    get:
      consumes:
      - application/json
      description: Return list of al registered tags
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.HttpResponse-array_string-any'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.HttpError-any'
      summary: Get tags
      tags:
      - tags
swagger: "2.0"
